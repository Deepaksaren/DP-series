Minimum Number Of Squares
Send Feedback
Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, as 1 is the minimum count of numbers required to represent N as sum of squares.
Input format :
The first and the only line of input contains an integer value, 'N'.
 Output format :
Print the minimum count of numbers required.
Constraints :
0 <= n <= 10 ^ 4

Time Limit: 1 sec
Sample Input 1 :
12
Sample Output 1 :
3
Explanation of Sample Output 1 :
12 can be represented as : 
A) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)

B) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)  + (2 ^ 2)

C) (1^2) + (1^2) + (1^2) + (1^2) + (2 ^ 2) + (2 ^ 2)

D) (2 ^ 2) + (2 ^ 2) + (2 ^ 2)

As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1


from sys import stdin
from sys import maxsize as MAXVALUE

def minCount(n) :
	#Your code goes here
	dp=[-1]*(n+1)
	dp[0] = 0
	return helper(n, dp)
	
def helper(n, dp):
	if n == 0:
		return 0
	minc = MAXVALUE
	# for i in range(1, n):
	i=1
	while (i*i) <= n:
		if dp[n-(i*i)] == -1:
			value = helper((n-(i*i)), dp)
			dp[n-(i*i)] = value
		else:
			value = dp[n-(i*i)]
		if minc>value:
			minc = value
		i+=1
		# i=(i*i)
		# else:
		# 	break
	res = 1+minc
	return res




#main
n = int(stdin.readline().rstrip())
print(minCount(n))
